// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: images.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countImages = `-- name: CountImages :one
SELECT COUNT(*) FROM images
`

func (q *Queries) CountImages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countImages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchImages = `-- name: CountSearchImages :one
SELECT COUNT(*) FROM images
WHERE name ILIKE $1 OR description ILIKE $1
`

func (q *Queries) CountSearchImages(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchImages, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO images (
    name, description, file_path, mime_type, size_bytes
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, description, file_path, mime_type, size_bytes, created_at, updated_at
`

type CreateImageParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	FilePath    string      `json:"file_path"`
	MimeType    string      `json:"mime_type"`
	SizeBytes   int64       `json:"size_bytes"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.Name,
		arg.Description,
		arg.FilePath,
		arg.MimeType,
		arg.SizeBytes,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FilePath,
		&i.MimeType,
		&i.SizeBytes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, name, description, file_path, mime_type, size_bytes, created_at, updated_at FROM images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FilePath,
		&i.MimeType,
		&i.SizeBytes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT id, name, description, file_path, mime_type, size_bytes, created_at, updated_at FROM images
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListImagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImages(ctx context.Context, arg ListImagesParams) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FilePath,
			&i.MimeType,
			&i.SizeBytes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchImages = `-- name: SearchImages :many
SELECT id, name, description, file_path, mime_type, size_bytes, created_at, updated_at FROM images
WHERE name ILIKE $1 OR description ILIKE $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchImagesParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchImages(ctx context.Context, arg SearchImagesParams) ([]Image, error) {
	rows, err := q.db.Query(ctx, searchImages, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FilePath,
			&i.MimeType,
			&i.SizeBytes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET name = $2,
    description = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, file_path, mime_type, size_bytes, created_at, updated_at
`

type UpdateImageParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImage, arg.ID, arg.Name, arg.Description)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FilePath,
		&i.MimeType,
		&i.SizeBytes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
